-- Supabase Database Schema for SAT RSPO PADI Application
-- This schema creates the required tables with Row Level Security (RLS) policies

-- =====================================================
-- 1. USERS TABLE
-- =====================================================

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id uuid REFERENCES auth.users(id) NOT NULL PRIMARY KEY,
    full_name text NOT NULL,
    email text UNIQUE NOT NULL,
    phone text,
    address text,
    role text NOT NULL CHECK (role IN ('petani', 'manajer'))
);

-- Enable Row Level Security (RLS) for users table
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Allow authenticated users to read their own data
CREATE POLICY "users_select_own" ON users
    FOR SELECT
    TO authenticated
    USING (auth.uid() = id);

-- RLS Policy: Allow authenticated users to insert their own data
CREATE POLICY "users_insert_own" ON users
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = id);

-- RLS Policy: Allow authenticated users to update their own data
CREATE POLICY "users_update_own" ON users
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = id)
    WITH CHECK (auth.uid() = id);

-- RLS Policy: No DELETE policy (users cannot delete their data)
-- This is intentionally omitted as per requirements

-- =====================================================
-- 2. ASSESSMENT RESULTS TABLE
-- =====================================================

-- Create assessment_results table
CREATE TABLE IF NOT EXISTS assessment_results (
    id int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    stage int2 NOT NULL,
    answers jsonb,
    total_score int2 NOT NULL,
    max_score int2 NOT NULL,
    percentage int2 NOT NULL,
    completed_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Enable Row Level Security (RLS) for assessment_results table
ALTER TABLE assessment_results ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Allow authenticated users to insert their own assessment results
CREATE POLICY "assessment_results_insert_own" ON assessment_results
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

-- RLS Policy: Allow authenticated users to read their own assessment results
CREATE POLICY "assessment_results_select_own" ON assessment_results
    FOR SELECT
    TO authenticated
    USING (auth.uid() = user_id);

-- =====================================================
-- 3. INDEXES FOR PERFORMANCE
-- =====================================================

-- Create index on user_id for faster lookups in assessment_results
CREATE INDEX IF NOT EXISTS idx_assessment_results_user_id ON assessment_results(user_id);

-- Create index on completed_at for time-based queries
CREATE INDEX IF NOT EXISTS idx_assessment_results_completed_at ON assessment_results(completed_at);

-- Create index on stage for filtering by assessment stage
CREATE INDEX IF NOT EXISTS idx_assessment_results_stage ON assessment_results(stage);

-- =====================================================
-- 4. FUNCTIONS AND TRIGGERS (Optional but Recommended)
-- =====================================================

-- Function to automatically create user profile when auth user is created
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
    INSERT INTO public.users (id, full_name, email, role)
    VALUES (
        NEW.id,
        COALESCE(NEW.raw_user_meta_data->>'full_name', ''),
        NEW.email,
        COALESCE(NEW.raw_user_meta_data->>'role', 'petani')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically create user profile on auth.users insert
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- =====================================================
-- 5. GRANT PERMISSIONS
-- =====================================================

-- Grant necessary permissions to authenticated users
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT ALL ON TABLE users TO authenticated;
GRANT ALL ON TABLE assessment_results TO authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;

-- =====================================================
-- SCHEMA SUMMARY
-- =====================================================
-- 
-- Tables Created:
-- 1. users - Stores user profile information with role restriction (petani/manajer)
-- 2. assessment_results - Stores assessment test results with JSON answers
--
-- RLS Policies:
-- - users: SELECT, INSERT, UPDATE for own data only (no DELETE)
-- - assessment_results: INSERT, SELECT for own data only
--
-- Relationships:
-- - users.id references auth.users(id)
-- - assessment_results.user_id references users(id) with CASCADE DELETE
--
-- Security Features:
-- - Row Level Security enabled on both tables
-- - Role validation constraint (only 'petani' or 'manajer' allowed)
-- - Automatic user profile creation via trigger
-- - Proper indexes for performance optimization
